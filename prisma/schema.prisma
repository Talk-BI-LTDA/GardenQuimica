generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String                @id @default(uuid())
  name                 String
  email                String                @unique
  password             String
  cpf                  String                @unique
  role                 Role                  @default(VENDEDOR)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  createdById          String?
  editedById           String?
  regiao               String?
  catalogoMedidas      CatalogoMedida[]
  catalogoObjecoes     CatalogoObjecao[]
  catalogoPagamentos   CatalogoPagamento[]
  catalogoProdutos     CatalogoProduto[]
  catalogoRecorrencias CatalogoRecorrencia[]
  catalogoSegmentos    CatalogoSegmento[]
  clientesCreated      Cliente[]             @relation("ClienteCreatedBy")
  clientesEdited       Cliente[]             @relation("ClienteEditedBy")
  condicoesCreated     CondicaoPagamento[]
  cotacoesEditadas     Cotacao[]             @relation("CotacaoEditedBy")
  cotacoes             Cotacao[]
  medidasCreated       Medida[]
  naoVendasEditadas    NaoVenda[]            @relation("NaoVendaEditedBy")
  naoVendas            NaoVenda[]
  produtosCreated      Produto[]
  recorrenciasCreated  Recorrencia[]
  Remarketing          Remarketing[]
  segmentosCreated     Segmento[]
  createdBy            User?                 @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdByMe          User[]                @relation("UserCreatedBy")
  editedBy             User?                 @relation("UserEditedBy", fields: [editedById], references: [id])
  editedByMe           User[]                @relation("UserEditedBy")
  vendasEditadas       Venda[]               @relation("VendaEditedBy")
  vendas               Venda[]
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Cliente {
  id                 String               @id @default(uuid())
  nome               String
  segmento           String
  cnpj               String
  razaoSocial        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdById        String
  editedById         String?
  whatsapp           String?
  recorrente         Boolean              @default(false)
  email              String?
  origem             String               @default("sistema")
  user_ns            String?              @unique
  createdBy          User                 @relation("ClienteCreatedBy", fields: [createdById], references: [id])
  editedBy           User?                @relation("ClienteEditedBy", fields: [editedById], references: [id])
  Cotacao            Cotacao[]
  EtiquetaCliente    EtiquetaCliente[]
  naoVendas          NaoVenda[]
  RemarketingCliente RemarketingCliente[]
  vendas             Venda[]
}

model Produto {
  id               String            @id @default(uuid())
  nome             String
  medida           String
  quantidade       Int
  valor            Float
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdById      String
  comissao         Float?            @default(0)
  icms             Float?            @default(0)
  ipi              Float?            @default(0)
  recorrente       Boolean           @default(false)
  CotacaoProduto   CotacaoProduto[]
  naoVendaProdutos NaoVendaProduto[]
  createdBy        User              @relation(fields: [createdById], references: [id])
  vendaProdutos    VendaProduto[]
}

model VendaProduto {
  id         String  @id @default(uuid())
  vendaId    String
  produtoId  String
  quantidade Int
  valor      Float
  medida     String
  comissao   Float?  @default(0)
  icms       Float?  @default(0)
  ipi        Float?  @default(0)
  produto    Produto @relation(fields: [produtoId], references: [id])
  venda      Venda   @relation(fields: [vendaId], references: [id], onDelete: Cascade)

  @@index([vendaId])
}

model NaoVendaProduto {
  id                String   @id @default(uuid())
  naoVendaId        String
  produtoId         String
  quantidade        Int
  valor             Float
  medida            String
  valorConcorrencia Float?
  nomeConcorrencia  String?
  icms              Float?
  objecao           String?
  infoNaoDisponivel Boolean? @default(false)
  ipi               Float?
  naoVenda          NaoVenda @relation(fields: [naoVendaId], references: [id], onDelete: Cascade)
  produto           Produto  @relation(fields: [produtoId], references: [id])
}

model Venda {
  id                String         @id @default(uuid())
  codigoVenda       String         @unique
  clienteId         String
  valorTotal        Float
  condicaoPagamento String
  vendaRecorrente   Boolean        @default(false)
  nomeRecorrencia   String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  vendedorId        String
  editedById        String?
  cliente           Cliente        @relation(fields: [clienteId], references: [id])
  editedBy          User?          @relation("VendaEditedBy", fields: [editedById], references: [id])
  vendedor          User           @relation(fields: [vendedorId], references: [id])
  produtos          VendaProduto[]

  @@index([createdAt])
  @@index([vendedorId])
}

model NaoVenda {
  id                String            @id @default(uuid())
  codigoVenda       String            @unique
  clienteId         String
  valorTotal        Float
  condicaoPagamento String
  objecaoGeral      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  vendedorId        String
  editedById        String?
  cliente           Cliente           @relation(fields: [clienteId], references: [id])
  editedBy          User?             @relation("NaoVendaEditedBy", fields: [editedById], references: [id])
  vendedor          User              @relation(fields: [vendedorId], references: [id])
  produtos          NaoVendaProduto[]

  @@index([createdAt])
  @@index([vendedorId])
}

model Segmento {
  id          String   @id @default(uuid())
  nome        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Medida {
  id          String   @id @default(uuid())
  nome        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model CondicaoPagamento {
  id          String   @id @default(uuid())
  nome        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Recorrencia {
  id          String   @id @default(uuid())
  nome        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model CatalogoProduto {
  id          String   @id @default(uuid())
  nome        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model CatalogoMedida {
  id          String   @id @default(uuid())
  nome        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model CatalogoRecorrencia {
  id          String   @id @default(uuid())
  nome        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model CatalogoSegmento {
  id          String   @id @default(uuid())
  nome        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model CatalogoPagamento {
  id          String   @id @default(uuid())
  nome        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model CatalogoObjecao {
  id          String   @id @default(uuid())
  nome        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Cotacao {
  id                String           @id @default(uuid())
  codigoCotacao     String           @unique
  clienteId         String
  valorTotal        Float
  condicaoPagamento String
  vendaRecorrente   Boolean          @default(false)
  nomeRecorrencia   String?
  status            String           @default("pendente")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  vendedorId        String
  editedById        String?
  cliente           Cliente          @relation(fields: [clienteId], references: [id])
  editedBy          User?            @relation("CotacaoEditedBy", fields: [editedById], references: [id])
  vendedor          User             @relation(fields: [vendedorId], references: [id])
  produtos          CotacaoProduto[]

  @@index([createdAt])
  @@index([vendedorId])
}

model CotacaoProduto {
  id         String  @id @default(uuid())
  cotacaoId  String
  produtoId  String
  quantidade Int
  valor      Float
  medida     String
  comissao   Float?  @default(0)
  icms       Float?  @default(0)
  ipi        Float?  @default(0)
  objecao    String?
  cotacao    Cotacao @relation(fields: [cotacaoId], references: [id], onDelete: Cascade)
  produto    Produto @relation(fields: [produtoId], references: [id])

  @@index([cotacaoId])
}

model EtiquetaCliente {
  id        String   @id
  nome      String
  clienteId String
  createdAt DateTime @default(now())
  Cliente   Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)

  @@unique([nome, clienteId])
}

model Remarketing {
  id                 String               @id
  nome               String
  dataAgendada       DateTime
  status             String               @default("agendado")
  subFlowNs          String               @default("f153643s1950233")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  vendedorId         String
  User               User                 @relation(fields: [vendedorId], references: [id])
  RemarketingCliente RemarketingCliente[]
}

model RemarketingCliente {
  id            String      @id
  remarketingId String
  clienteId     String
  createdAt     DateTime    @default(now())
  Cliente       Cliente     @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  Remarketing   Remarketing @relation(fields: [remarketingId], references: [id], onDelete: Cascade)

  @@unique([remarketingId, clienteId])
}

enum Role {
  ADMIN
  VENDEDOR
}
